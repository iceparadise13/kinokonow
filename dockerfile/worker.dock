FROM python:3.6

RUN apt-get update

# Jumanppの依存性
# Boostを`apt-get install libboost-dev`で入れると1.55がインストールされてJumanppに必要な1.57が満たされないので自分でビルドする
# Boostの依存性
RUN apt-get install -y build-essential g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev
# Boostのインストール
ENV BOOST_VER 1.62.0
ENV BOOST_DIR boost_1_62_0
# うるさいので-qフラグをつける
RUN wget -qO ${BOOST_DIR}.tar.gz http://sourceforge.net/projects/boost/files/boost/${BOOST_VER}/${BOOST_DIR}.tar.gz/download
RUN tar xzvf ${BOOST_DIR}.tar.gz
# cdした後の現在ディレクトリはRUNコマンド後に初期化されるので一々cdする必要がある
# コマンドを結合して一行で実行する手はあるが、キャッシュが活用出来なくなる
RUN cd ${BOOST_DIR} && ./bootstrap.sh
# `./b2`で失敗したコンポーネントは無視したいので失敗した場合`true`を実行して終了コードを無理やり0にセットする
RUN cd ${BOOST_DIR} && (./b2 || true)
RUN cd ${BOOST_DIR} && (./b2 install || true)
# Jumanppのインストール
RUN wget -q http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.01.tar.xz
RUN tar xJvf jumanpp-1.01.tar.xz
RUN echo ${BOOST_ROOT}
RUN cd jumanpp-1.01 && ./configure
RUN cd jumanpp-1.01 && make
RUN cd jumanpp-1.01 && make install

#Jumanのインストール
RUN wget -q http://nlp.ist.i.kyoto-u.ac.jp/nl-resource/juman/juman-7.01.tar.bz2
RUN tar jxvf juman-7.01.tar.bz2
ENV JUMAN_DIR juman-7.01
RUN cd ${JUMAN_DIR} && ./configure
RUN cd ${JUMAN_DIR} && make
RUN cd ${JUMAN_DIR} && make install

# python-onbuild系のイメージを使うとプロジェクトのファイルが一つでも変わる度に
# ビルドのキャッシュが無効化されるので自分で依存性をインストールして
# プロジェクトのファイルをコピーする
# RUN mkdir -p /usr/src/app
# WORKDIR /usr/src/app
# requirements.txtを`COPY . /usr/src/app`と一緒にコピーしてしまうとプロジェクトのファイルが一つでも変わる度に
# 依存性を全てインストールし直す必要が出てくるので先にコピーしておく
# COPY requirements.txt /usr/src/app/
# RUN pip install --no-cache-dir -r requirements.txt
# COPY . /usr/src/app

ENTRYPOINT echo "猫を踏んだ" | jumanpp
